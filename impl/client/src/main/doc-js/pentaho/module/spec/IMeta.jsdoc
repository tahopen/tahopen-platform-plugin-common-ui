/*!
 * Copyright 2018 - 2019 Hitachi Vantara. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @classDesc The `spec.IMeta` interface contains the metadata of a module.
 *
 * @name IMeta
 * @memberOf pentaho.module.spec
 * @interface
 *
 * @see pentaho.module.IMeta
 *
 * @see pentaho.module.spec.ITypeMeta
 * @see pentaho.module.spec.IInstanceMeta
 */

/**
 * The alias of the module.
 *
 * @name alias
 * @memberOf pentaho.module.spec.IMeta#
 * @type {?nonEmptyString}
 */

/**
 * The ranking of the module.
 *
 * The ranking determines the order of the module amongst other modules.
 *
 * @name ranking
 * @memberOf pentaho.module.spec.IMeta#
 * @type {number}
 * @default 0
 */

/**
 * Indicates if the module is virtual.
 *
 * A virtual module does not have a corresponding file or implementation.
 *
 * @name isVirtual
 * @memberOf pentaho.module.spec.IMeta#
 * @type {?boolean}
 * @default false
 */

/**
 * The value of the module or a function that creates it.
 *
 * When specified, an AMD/RequireJS module with this module's id is dynamically defined.
 *
 * Only considered specified when different from `undefined`.
 * When a function, whatever its return value is taken as the value of the module.
 * When a function, it is called with the module metadata object,
 * having its configuration already loaded.
 *
 * @name value
 * @memberOf pentaho.module.spec.IMeta#
 * @type {(*|(function(pentaho.module.IMeta) : *))}
 */

/**
 * The map of global module annotations' configurations.
 *
 * A map whose keys are annotation module identifiers and
 * whose values are global annotation configurations.
 *
 * Annotations can be further configured, conditionally,
 * using the configuration rules' [annotation]{@link pentaho.config.spec.IRuleSelector#annotation}
 * selector property.
 *
 * @name annotations
 * @memberOf pentaho.module.spec.IMeta#
 * @type {?Object.<string, null|object|boolean>}
 */

/**
 * The module's global configuration object.
 *
 * Modules can be further configured, conditionally,
 * using the configuration rules' [module]{@link pentaho.config.spec.IRuleSelector#module}
 * selector property.
 *
 * @name config
 * @memberOf pentaho.module.spec.IMeta#
 * @type {?object}
 */
